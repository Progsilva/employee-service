// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package employees is a generated GoMock package.
package employees

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_mail "github.com/wneessen/go-mail"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckEmployeeExists mocks base method.
func (m *MockStore) CheckEmployeeExists(ctx context.Context, username, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmployeeExists", ctx, username, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmployeeExists indicates an expected call of CheckEmployeeExists.
func (mr *MockStoreMockRecorder) CheckEmployeeExists(ctx, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmployeeExists", reflect.TypeOf((*MockStore)(nil).CheckEmployeeExists), ctx, username, email)
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(ctx context.Context, e *Employee) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, e)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), ctx, e)
}

// DeleteEmployee mocks base method.
func (m *MockStore) DeleteEmployee(ctx context.Context, ID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockStoreMockRecorder) DeleteEmployee(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockStore)(nil).DeleteEmployee), ctx, ID)
}

// GetDepartment mocks base method.
func (m *MockStore) GetDepartment(ctx context.Context, id int64) (*Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", ctx, id)
	ret0, _ := ret[0].(*Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockStoreMockRecorder) GetDepartment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockStore)(nil).GetDepartment), ctx, id)
}

// GetEmployee mocks base method.
func (m *MockStore) GetEmployee(ctx context.Context, id int64) (*Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", ctx, id)
	ret0, _ := ret[0].(*Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockStoreMockRecorder) GetEmployee(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockStore)(nil).GetEmployee), ctx, id)
}

// ListEmployees mocks base method.
func (m *MockStore) ListEmployees(ctx context.Context, departmentID *int, sort []string, limit, offset int) ([]*Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", ctx, departmentID, sort, limit, offset)
	ret0, _ := ret[0].([]*Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockStoreMockRecorder) ListEmployees(ctx, departmentID, sort, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockStore)(nil).ListEmployees), ctx, departmentID, sort, limit, offset)
}

// Login mocks base method.
func (m *MockStore) Login(ctx context.Context, username, password string) (*Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStoreMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStore)(nil).Login), ctx, username, password)
}

// UpdateEmployee mocks base method.
func (m *MockStore) UpdateEmployee(ctx context.Context, employee *Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockStoreMockRecorder) UpdateEmployee(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockStore)(nil).UpdateEmployee), ctx, employee)
}

// MockMailClient is a mock of MailClient interface.
type MockMailClient struct {
	ctrl     *gomock.Controller
	recorder *MockMailClientMockRecorder
}

// MockMailClientMockRecorder is the mock recorder for MockMailClient.
type MockMailClientMockRecorder struct {
	mock *MockMailClient
}

// NewMockMailClient creates a new mock instance.
func NewMockMailClient(ctrl *gomock.Controller) *MockMailClient {
	mock := &MockMailClient{ctrl: ctrl}
	mock.recorder = &MockMailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailClient) EXPECT() *MockMailClientMockRecorder {
	return m.recorder
}

// DialAndSendWithContext mocks base method.
func (m *MockMailClient) DialAndSendWithContext(ctx context.Context, ml ...*go_mail.Msg) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ml {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialAndSendWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSendWithContext indicates an expected call of DialAndSendWithContext.
func (mr *MockMailClientMockRecorder) DialAndSendWithContext(ctx interface{}, ml ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ml...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSendWithContext", reflect.TypeOf((*MockMailClient)(nil).DialAndSendWithContext), varargs...)
}

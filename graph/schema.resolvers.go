package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"github.com/Progsilva/employee-service/cmd/web/middleware"
	"github.com/Progsilva/employee-service/graph/model"
	"net/mail"
	"time"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	dob, err := time.Parse("02-01-2006", input.Dob)
	if err != nil {
		return nil, err
	}
	if _, err = mail.ParseAddress(input.Email); err != nil {
		return nil, err
	}
	employee, err := r.Service.CreateEmployee(ctx, input.ToEmployee(dob))
	if err != nil {
		return nil, err
	}
	return model.FromEmployee(employee), nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, input model.UpdateEmployee) (*model.Employee, error) {
	dob, err := time.Parse("02-01-2006", input.Dob)
	if err != nil {
		return nil, err
	}
	if _, err = mail.ParseAddress(input.Email); err != nil {
		return nil, err
	}
	employee, err := r.Service.UpdateEmployee(ctx, input.ToEmployee(dob))
	if err != nil {
		return nil, err
	}
	return model.FromEmployee(employee), nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, input model.DeleteEmployee) (*int, error) {
	if err := r.Service.DeleteEmployee(ctx, int64(input.ID)); err != nil {
		return nil, err
	}
	return &input.ID, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, departmentID *int, sort []*string, limit *int, offset *int) ([]*model.Employee, error) {
	employees, err := r.Service.Employees(ctx,
		departmentID, model.FilterSort(sort), model.Limit(limit), model.Offset(offset))
	if err != nil {
		return nil, err
	}
	return model.FromEmployees(employees), nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id int) (*model.Employee, error) {
	employee, err := r.Service.GetEmployee(ctx, int64(id))
	if err != nil {
		return nil, err
	}
	return model.FromEmployee(employee), nil
}

// CurrentEmployee is the resolver for the currentEmployee field.
func (r *queryResolver) CurrentEmployee(ctx context.Context) (*model.Employee, error) {
	u := middleware.CtxUser(ctx)
	if u == nil {
		return nil, fmt.Errorf("blalba")
	}
	employee, err := r.Service.GetEmployee(ctx, u.ID)
	if err != nil {
		return nil, err
	}
	return model.FromEmployee(employee), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
